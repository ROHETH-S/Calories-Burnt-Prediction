# -*- coding: utf-8 -*-
"""calorieburnt prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R7L2U4HholdMl5ctVaozipM7FZ-OHVqP
"""

import numpy as np
# libary which is used to make array
import pandas as pd
# libary used to make dataframes(structured table),when we load data into data frame it is easy to analyze
import matplotlib.pyplot as plt
import seaborn as sns
# this both are used for visulization purpose
from sklearn.model_selection import train_test_split
# libaries used to split data into train and test
from xgboost import XGBRegressor
from sklearn import metrics
# used to evaluate our model, measure error value, how our model is efficient

# csv-comma seprated values
# loading the data from calorie.csv file into padas data frame
calories=pd.read_csv('/content/calories.csv')

# printing first 5 rows of data frame
calories.head()

# loading the data from exercise.csv file into padas data frame
exercise_data= pd.read_csv('/content/exercise.csv')

# printing first 5 rows of data frame
exercise_data.head()

# combining two data frames, we need only callories value form calorie data frame
# axis=1 means we are adding in coloumn wise, axis=0 we are adding row wise
calories_data=pd.concat([exercise_data, calories['Calories']], axis=1)

calories_data.head()

# checking no of rows and coloumns-data points
calories_data.shape
#(row, column)

calories_data.info()
#string-object

#checking for null values
calories_data.isnull().sum()

#data visulization

# statistical measure, text cant be done(gender)
calories_data.describe()

sns.set()

# plotting the gender column (categorical plot)
sns.countplot(calories_data['Gender'])

# finding the distibution of age column (distribution plot)
sns.displot(calories_data['Age'])

# finding the distibution of height column (distribution plot)
sns.displot(calories_data['Height'])

# coorelation
#1. postive corelation - one value increase other also increases
#eg, duration increases calories also increases
#2. negative - opposite to positive

#constructing heat map to understand correlation
correlation=calories_data.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

#converting text data into numerical values(data encoding)
calories_data.replace({'Gender':{'male':0, 'female':1}}, inplace=True)

calories_data.head()

#seprating features(other all) and target(calories)
X=calories_data.drop(columns=['User_ID', 'Calories'], axis=1)
Y=calories_data['Calories']

print(X)

print(Y)

# splitting data into training data and testing data
X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.2, random_state=2)
# taking 20% test data, random use to select data in random way

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

#loading the Model
model= XGBRegressor()

#traing the model with X_train
model.fit(X_train, Y_train)

#evaluations

# prediction on test data

test_data_prediction=model.predict(X_test)

print(test_data_prediction)

# mean absolute error
mae=metrics.mean_absolute_error(Y_test, test_data_prediction)

print("mean absolute error =", mae)

# prediction on training data
training_data_prediction =model.predict(X_train)

# R squared value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared vale : ', r2_train)

# prediction on test data
test_data_prediction =model.predict(X_test)

# R squared value
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared vale : ', r2_test)

input_data = (0,  68,   190.0,    94.0,      29.0,       105.0,       40.8)

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

print('calories burnt is ', prediction[0])